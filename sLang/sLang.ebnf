program = function {variable} {function};

variable = variableDeklaration [ASSIGN_OPERATOR expression] SEMICOLON;
function = FUNCTION (DATATYPE | VOID) NAME BRACKET_OPEN [{DATATYPE NAME COMMA} DATATYPE NAME] BRACKET_CLOSE block;

variableDeklaration = DATATYPE NAME;

block = BLOCK_OPEN {statement} BLOCK_CLOSE;

statement = [block | structure | ((expressionStatement | RETURN)] SEMICOLON;
expressionStatement = functioncall | assignment | unOpExpression;

structure = whileStruct | ifStruct;
whileStruct = WHILE BRACKET_OPEN expression BRACKET_CLOSE statement;
ifStruct = IF BRACKET_OPEN expression BRACKET_CLOSE statement [ELSE statement];

functioncall = NAME BRACKET_OPEN [{NAME COMMA} NAME] BRACKET_CLOSE;

assignment = ((variableDeklaration ASSIGN_OPERATOR) | (NAME (ASSIGN_OPERATOR | SHORT_ASSIGN_OPERATOR) expression;

unOpExpression = NAME UN_OPERATOR;
expression = [BRACKET_OPEN] (functioncall | arithmeticExpression) [BRACKET_CLOSE];
arithmeticExpression = (unOpExpression | (NAME | NUMBER | expression | character)) [BIN_OPERATOR expression];

character = APOSTROPHE NAME APOSTROPHE;
